import json
from datetime import datetime
from typing import List, Optional, Dict, Any
from motor.motor_asyncio import AsyncIOMotorDatabase
from fastapi import HTTPException
from app.models.chatflow import Chatflow, ChatflowSyncResult, UserChatflow
from app.services.flowise_service import FlowiseService
from app.core.logging import logger
from app.models.user import User
from app.services.external_auth_service import ExternalAuthService
# Import the schemas from the new central location
from app.schemas import (
    UserAuditResult,
    UserCleanupResult,
    InvalidUserAssignment,
    BulkUserAssignmentResponse,
    UserAssignmentResponse,
    ChatflowUserResponse,
    SyncUserResponse
)

class ChatflowService:
    def __init__(self, db: AsyncIOMotorDatabase, flowise_service: FlowiseService, external_auth_service: ExternalAuthService):
        self.db = db
        self.flowise_service = flowise_service
        self.external_auth_service = external_auth_service

    async def sync_chatflows_from_flowise(self) -> ChatflowSyncResult:
        """
        Synchronize chatflows from Flowise API to local database using Beanie ODM.
        """
        result = ChatflowSyncResult(
            total_fetched=0,
            created=0,
            updated=0,
            deleted=0,
            errors=0
        )
        
        try:
            # Fetch chatflows from Flowise
            flowise_chatflows = await self.flowise_service.list_chatflows()
            result.total_fetched = len(flowise_chatflows)
            
            # Get existing chatflows from database using Beanie
            existing_chatflows = await Chatflow.find_all().to_list()
            existing_ids_map = {cf.flowise_id: cf for cf in existing_chatflows}
            
            # Track current Flowise IDs
            current_flowise_ids = set()
            
            # Process each chatflow from Flowise
            for flowise_cf in flowise_chatflows:
                try:
                    flowise_id = flowise_cf["id"]
                    current_flowise_ids.add(flowise_id)
                    
                    # Convert Flowise chatflow to our model data
                    chatflow_data = await self._convert_flowise_chatflow(flowise_cf)
                    
                    # Check if chatflow exists
                    if flowise_id in existing_ids_map:
                        # Update existing chatflow using Beanie
                        chatflow_to_update = existing_ids_map[flowise_id]
                        await chatflow_to_update.update({"$set": chatflow_data})
                        result.updated += 1
                        logger.info(f"Updated chatflow: {chatflow_data['name']} ({flowise_id})")
                    else:
                        # Create new chatflow using Beanie
                        new_chatflow = Chatflow(**chatflow_data)
                        await new_chatflow.insert()
                        result.created += 1
                        logger.info(f"Created chatflow: {chatflow_data['name']} ({flowise_id})")
                        
                except Exception as e:
                    result.errors += 1
                    error_msg = f"Error processing chatflow {flowise_cf.get('id', 'unknown')}: {str(e)}"
                    result.error_details.append(error_msg)
                    logger.error(error_msg)
            
            # Mark deleted chatflows using Beanie
            deleted_ids = set(existing_ids_map.keys()) - current_flowise_ids
            if deleted_ids:
                await Chatflow.find(Chatflow.flowise_id.is_in(list(deleted_ids))).update(
                    {"$set": {"sync_status": "deleted", "synced_at": datetime.utcnow()}}
                )
                result.deleted = len(deleted_ids)
                logger.info(f"Marked {len(deleted_ids)} chatflows as deleted")
            
        except Exception as e:
            result.errors += 1
            error_msg = f"Failed to sync chatflows: {str(e)}"
            result.error_details.append(error_msg)
            logger.error(error_msg)
        
        return result

    async def list_chatflows(self, include_deleted: bool = False) -> List[Chatflow]:
        """
        Lists chatflows from the database.
        If include_deleted is False, it only returns chatflows that are not deleted.
        """
        if include_deleted:
            query = {}
        else:
            # This will return chatflows where sync_status is not 'deleted'
            query = {"sync_status": {"$ne": "deleted"}}
        
        return await Chatflow.find(query).to_list()

    async def get_chatflow_stats(self) -> Dict[str, Any]:
        """
        Get chatflow statistics using Beanie ODM.
        """
        pipeline = [
            {
                "$group": {
                    "_id": "$sync_status",
                    "count": {"$sum": 1}
                }
            }
        ]
        
        stats_cursor = Chatflow.aggregate(pipeline)
        stats_list = await stats_cursor.to_list()
        
        stats = {item["_id"]: item["count"] for item in stats_list}
        
        total = await Chatflow.count()
        last_sync = await self._get_last_sync_time()

        return {
            "total": total,
            "active": stats.get("active", 0),
            "deleted": stats.get("deleted", 0),
            "error": stats.get("error", 0),
            "last_sync": last_sync if last_sync else None
        }

    async def _get_last_sync_time(self) -> Optional[datetime]:
        """
        Get the timestamp of the last successful sync using Beanie ODM.
        """
        result = await Chatflow.find_one(sort=[(Chatflow.synced_at, -1)])
        return result.synced_at if result else None

    async def get_chatflow_by_flowise_id(self, flowise_id: str) -> Optional[Chatflow]:
        """
        Get chatflow by Flowise ID using Beanie ODM.
        """
        return await Chatflow.find_one(Chatflow.flowise_id == flowise_id)

    # ...existing code...
